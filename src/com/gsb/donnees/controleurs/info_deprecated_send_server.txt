Méthodes dépréciées dans le fichier ExportDonn.java
Deprecated methods in ExportDonn.java file

Les nouvelles méthodes sont:
News methods are :



public static final int CONNECTION_TIMEOUT=10000;
    public static final int READ_TIMEOUT=15000;
    private Context cont;
    private String urlString;
    private JSONObject json = new JSONObject();


    //ProgressDialog pdLoading = new ProgressDialog(MainActivity.);
    private HttpURLConnection conn;
    private URL url = null;

    /**
     * Constructeur 1 de la classe Async
     * @param context
     */
    public AsyncLogin(Context context, String urlS ){
        this.cont = context;
        urlString = urlS;
    }

    /**
     * Constructeur 2 de la classe Async
     * @param context
     */
    public AsyncLogin(Context context){
        this.cont = context;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
    }


    /**
     * la version qui change
     * this version change
     * @param params
     * @return
     */
    @Override
    protected String doInBackground(String... params) {

        try {
            // Enter URL address where your php file resides
            url = new URL(params[0]);

        } catch (MalformedURLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return "exception";
        }
        try {
            // Setup HttpURLConnection class to send and receive data from php and mysql
            conn = (HttpURLConnection) url.openConnection();
            conn.setReadTimeout(READ_TIMEOUT);
            conn.setConnectTimeout(CONNECTION_TIMEOUT);
            conn.setRequestMethod("POST");

            // setDoInput and setDoOutput method depict handling of both send and receive
            conn.setDoInput(true);
            conn.setDoOutput(true);

            // Open connection for sending data
            OutputStream os = conn.getOutputStream();
            BufferedWriter writer = new BufferedWriter(
                    new OutputStreamWriter(os, "UTF-8"));
            writer.write(json.toString());
            writer.flush();
            writer.close();
            os.close();
            conn.connect();

        } catch (IOException e1) {
            e1.printStackTrace();
            return "exception";
        }

        try {

            int response_code = conn.getResponseCode();

            // Vérifie si la connexion est une succès
            if (response_code == HttpURLConnection.HTTP_OK) {

                // Read data sent from server
                InputStream input = conn.getInputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(input));
                StringBuilder result = new StringBuilder();
                String line;

                while ((line = reader.readLine()) != null) {
                    result.append(line);
                }

                // envoie des données reçus en onPostExecute
                return (result.toString());

            } else {

                return ("unsuccessful");
            }

        } catch (IOException e) {
            e.printStackTrace();
            return "exception";
        } finally {
            conn.disconnect();
        }

    }
   

    @Override
    protected void onPostExecute(String result) {

            MainActivity.receptMessage(result, cont);

    }

    public void recupId(String email, String mdp){

        try{

            //Ne change pas
            //No change

        }catch (Throwable e){
            e.printStackTrace();
        }
    }
